{"version":3,"sources":["components/Title/index.js","components/SearchAndSortComponents/SearchByName/index.js","components/SearchAndSortComponents/SortEmployees/index.js","components/TableComponents/Table/index.js","components/TableComponents/EmployeeRow/index.js","components/TableComponents/TableHeader/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","SearchByName","value","search","onChange","event","updateSearch","target","onClick","handleFormSubmit","SortEmployees","type","sortByPosition","sortByDepartment","Table","EmployeeRow","name","position","department","TableHeader","employees","map","employee","key","id","App","state","sortDirection","departmentDirection","positionDirection","str","setState","preventDefault","filterEmployeesByName","selectedEmployee","filter","toLowerCase","includes","console","log","sortedEmployees","sort","a","b","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7acbf926.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction SearchByName(props) {\n    return (\n        \n        <form  className=\"search-form\">\n        <div className=\"search-div\">\n            <label>Search by Name</label>\n            <input className=\"search-input\" value={props.search} onChange={(event) => props.updateSearch(event.target.value)} />\n            <button onClick={props.handleFormSubmit} className=\"btn btn-secondary mt-3\">\n          Search\n        </button>\n        </div>\n        </form>\n    \n    )\n}\n\nexport default SearchByName\n\n","import React from \"react\"\nimport \"./style.css\"\n\nfunction SortEmployees(props) {\n    return (\n        <div className=\"sort-div\">\n                <button type=\"button\" className=\"btn btn-outline-primary\" onClick={props.sortByPosition}>Sort By Position (A-Z)</button>\n                <button type=\"button\" className=\"btn btn-outline-primary\" onClick={props.sortByDepartment}>Sort By Department (A-Z)</button>\n        </div>\n    );\n}\n\nexport default SortEmployees","import React from \"react\"\n\nfunction Table(props) {\n    return (\n    <div>\n        <table className=\"container\">\n        {props.children}\n        </table>\n    </div>\n    )\n}\n\nexport default Table","import React from \"react\";\nimport \"./style.css\"\n\nfunction EmployeeRow(props) {\n    return (\n        <tr className=\"employee-row\">\n            <td className=\"name-col employee-name-col\">{props.name}</td>\n            <td className=\"position-col employee-position-col\">{props.position}</td>\n            <td className=\"department-col employee-department-col\">{props.department}</td>\n        </tr>\n    );\n}\n\nexport default EmployeeRow;","import React from \"react\"\nimport EmployeeRow from \"../EmployeeRow\"\nimport \"./style.css\";\n\nfunction TableHeader({ employees }) {\n    return(\n        <thead>\n            <tr>\n                <td className=\"name-col header\">Employee Name</td>\n                <td className=\"position-col header\">Position</td>\n                <td className=\"department-col header\">Department</td>\n            </tr>\n            {employees.map(employee => (\n                <EmployeeRow\n                  key={employee.id}\n                  name={employee.name}\n                  position={employee.position}\n                  department={employee.department}\n                />\n              ))}\n        </thead>\n    )\n}\n\nexport default TableHeader","import React, { Component } from \"react\";\nimport './App.css';\nimport employees from \"./employees.json\";\nimport Title from \"./components/Title\";\nimport SearchByName from \"./components/SearchAndSortComponents/SearchByName\";\nimport SortEmployees from \"./components/SearchAndSortComponents/SortEmployees\";\nimport Table from \"./components/TableComponents/Table\"\nimport TableHeader from \"./components/TableComponents/TableHeader\"\n\nclass App extends Component {\n  // Setting this.state.employees to the employees json array,\n  // and setting search to empty string\n  state = {\n    employees,\n    search: \"\",\n    sortDirection: {\n      departmentDirection: \"asc\",\n      positionDirection: \"asc\"\n    }\n  };\n\n  updateSearch = str => {\n    // Updating the input's state\n    this.setState({\n      search: str,\n      employees\n    });\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.filterEmployeesByName(this.state.search);\n  }\n\n  // function attached to search button to filter employees by name\n  filterEmployeesByName = name => {\n    const selectedEmployee = this.state.employees.filter(employee => employee.name.toLowerCase().includes(name.toLowerCase()));\n    this.setState({\n      employees: selectedEmployee,\n      search: \"\"\n    });\n  };\n\n  // function attached to button to sort employees by position\n  sortByPosition = () => {\n    console.log(\"clicked\");\n    let sortedEmployees = [...this.state.employees].sort((a, b) => {\n      if (a.position > b.position) {\n        return 1;\n      } else if (a.position < b.position) {\n        return -1;\n      } else {\n        return 0\n      }\n    });\n\n\n    this.setState({\n      employees: sortedEmployees\n    })\n  }\n\n  // function attached to button to sort employees by position\n  sortByDepartment = () => {\n    console.log(\"clicked\");\n    // cloning the employees state to a variable for sorting\n    let sortedEmployees = [...this.state.employees].sort((a, b) => {\n      if (a.department > b.department) {\n        return 1;\n      } else if (a.department < b.department) {\n        return -1;\n      } else {\n        return 0\n      }\n    });\n\n    this.setState({\n      employees: sortedEmployees\n    })\n  }\n\n\n  // Map over this.state.employees and render an EmployeeCard component for each employee object\n  render() {\n    console.log(this.state.employees)\n    return (\n      <div className=\"container\">\n        <Title>Employee Directory</Title>\n        <SearchByName\n          className=\"search\"\n          updateSearch={this.updateSearch}\n          handleFormSubmit={this.handleFormSubmit}\n          search={this.state.search}\n        />\n        <SortEmployees className=\"sort\"\n          sortByPosition={this.sortByPosition}\n          sortByDepartment={this.sortByDepartment}\n        />\n        <hr></hr>\n        <div className=\"table-container\">\n          <Table>\n            <TableHeader\n              employees={this.state.employees}\n            />\n          </Table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}